<MudAppBar Color="Color.Primary" Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
    <MudIconButton Icon="@_themeIcon" Color="Color.Inherit" OnClick="@UpdateIsDarkMode" />
</MudAppBar>

<MudDrawer @bind-Open="@open" ClipMode="@DrawerClipMode.Never" PreserveOpenState="@preserveOpenState" Elevation="1" Variant="@DrawerVariant.Mini">
    <MudNavMenu Class="mud-width-full">
        <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home">
            Home
        </MudNavLink>
        <MudNavLink Href="/encrypt-text" Icon="@Icons.Material.Filled.TextFormat">
            Encrypt-Text
        </MudNavLink>
        <MudNavLink Href="/encrypt-file" Icon="@Icons.Material.Filled.UploadFile">
            Encrypt-File
        </MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code {
    [Parameter]
    public bool IsDarkMode { get; set; }
    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get; set; }
    async Task UpdateIsDarkMode()
    {
        IsDarkMode = !IsDarkMode;

        if (IsDarkMode) {
            _themeIcon = Icons.Material.Filled.DarkMode;
        }
        else {
            _themeIcon = Icons.Material.Filled.LightMode;
        }

        await IsDarkModeChanged.InvokeAsync(IsDarkMode);
    }
    private string _themeIcon = Icons.Material.Filled.LightMode;
    private bool open = true;
    private bool preserveOpenState = false;
    private void ToggleDrawer()
    {
        open = !open;
    }
}
