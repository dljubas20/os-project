@page "/asymmetric-encrypt-file"
@inject NavigationManager NavigationManager
@inject IEncryptionRepository EncryptionRepository

<h3>Asymmetric File Encryptinator</h3>

<EditForm
    Model="@Model"
    OnValidSubmit="@OnValidSubmit"
    style="
        display: flex;
        flex-direction: column;
        align-items: center;
    "
>
    <DataAnnotationsValidator />
    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ButtonTemplate Context="buttonContext">
            <MudButton HtmlTag="label"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.CloudUpload"
                    for="@buttonContext">
                Choose File
            </MudButton>
            <ValidationMessage For="() => Model.Files" />
        </ButtonTemplate>
    </MudFileUpload>

    @if (Model.Files != null)
    {
        <MudText Typo="@Typo.h6">@Model.Files.Count() File@(Model.Files.Count() == 1 ? "" : "s"):</MudText>
        <MudList>
            @foreach (var file in Model.Files)
            {
                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                    @file.Name <code>@file.Size bytes</code>
                </MudListItem>
            }
        </MudList>
    }

    <MudContainer>
        <MudButton
            Variant="Variant.Filled"
            ButtonType="ButtonType.Submit"
            Color="Color.Primary"
            Style="width: fit-content; margin: 2vh;"
            Disabled="@isEncryptDisabled"
        >
            Upload and Encrypt
        </MudButton>

        <MudButton
            Variant="Variant.Filled"
            ButtonType="ButtonType.Button"
            Color="Color.Primary"
            Style="width: fit-content; margin: 2vh;"
            OnClick="@Decrypt"
            Disabled="@isDecryptDisabled"
        >
            Decrypt
        </MudButton>

        <MudButton
            Variant="Variant.Filled"
            ButtonType="ButtonType.Button"
            Color="Color.Primary"
            Style="width: fit-content; margin: 2vh;"
            OnClick="@GenerateHash"
            Disabled="@isGenerateHashDisabled"
        >
            Generate Hash
        </MudButton>

        <MudButton
            Variant="Variant.Filled"
            ButtonType="ButtonType.Button"
            Color="Color.Primary"
            Style="width: fit-content; margin: 2vh;"
            OnClick="@GenerateSignature"
            Disabled="@isSignDisabled"
        >
            Generate Signature
        </MudButton>

        <MudButton
            Variant="Variant.Filled"
            ButtonType="ButtonType.Button"
            Color="Color.Primary"
            Style="width: fit-content; margin: 2vh;"
            OnClick="@VerifySignature"
            Disabled="@isVerifySignatureDisabled"
        >
            Verify Signature
        </MudButton>
    </MudContainer>
</EditForm>

@code {
    private bool isEncryptDisabled = false;
    private bool isDecryptDisabled = true;
    private bool isGenerateHashDisabled = true;
    private bool isSignDisabled = true;
    private bool isVerifySignatureDisabled = true;
    public class FileEncryptInput
    {
        [Required]
        public IList<IBrowserFile>? Files { get; set; }
    }
    public FileEncryptInput Model { get; set; } = new FileEncryptInput();
    private void UploadFiles(IBrowserFile file)
    {
        if (Model.Files == null) {
            Model.Files = new List<IBrowserFile>();
        }
        Model.Files.Clear();
        Model.Files.Add(file);
    }
    private async Task OnValidSubmit(EditContext context)
    {
        await EncryptionRepository.AsymmetricEncryptFile(Model.Files.First());
        StateHasChanged();

        isEncryptDisabled = true;
        isDecryptDisabled = false;
    }

    private void Decrypt()
    {
        EncryptionRepository.AsymmetricDecryptFile();

        isDecryptDisabled = true;
        isGenerateHashDisabled = false;
    }

    private void GenerateHash()
    {
        EncryptionRepository.AsymmetricHashFile();

        isGenerateHashDisabled = true;
        isSignDisabled = false;
    }

    private void GenerateSignature()
    {
        EncryptionRepository.AsymmetricSignFile();

        isSignDisabled = true;
        isVerifySignatureDisabled = false;
    }

    private void VerifySignature()
    {
        if (EncryptionRepository.AsymmetricVerifyFileSignature()) {
            isVerifySignatureDisabled = true;
            isEncryptDisabled = false;

            NavigationManager.NavigateTo("/");
        }

    }
    protected override void OnInitialized()
    {
        
    }
}
